/*
 * Copyright 2019 The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/pivotal/kpack/pkg/apis/experimental/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCustomBuilderLists implements CustomBuilderListInterface
type FakeCustomBuilderLists struct {
	Fake *FakeExperimentalV1alpha1
	ns   string
}

var custombuilderlistsResource = schema.GroupVersionResource{Group: "experimental.kpack.pivotal.io", Version: "v1alpha1", Resource: "custombuilderlists"}

var custombuilderlistsKind = schema.GroupVersionKind{Group: "experimental.kpack.pivotal.io", Version: "v1alpha1", Kind: "CustomBuilderList"}

// Get takes name of the customBuilderList, and returns the corresponding customBuilderList object, and an error if there is any.
func (c *FakeCustomBuilderLists) Get(name string, options v1.GetOptions) (result *v1alpha1.CustomBuilderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(custombuilderlistsResource, c.ns, name), &v1alpha1.CustomBuilderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CustomBuilderList), err
}

// List takes label and field selectors, and returns the list of CustomBuilderLists that match those selectors.
func (c *FakeCustomBuilderLists) List(opts v1.ListOptions) (result *v1alpha1.CustomBuilderListList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(custombuilderlistsResource, custombuilderlistsKind, c.ns, opts), &v1alpha1.CustomBuilderListList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CustomBuilderListList), err
}

// Watch returns a watch.Interface that watches the requested customBuilderLists.
func (c *FakeCustomBuilderLists) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(custombuilderlistsResource, c.ns, opts))

}

// Create takes the representation of a customBuilderList and creates it.  Returns the server's representation of the customBuilderList, and an error, if there is any.
func (c *FakeCustomBuilderLists) Create(customBuilderList *v1alpha1.CustomBuilderList) (result *v1alpha1.CustomBuilderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(custombuilderlistsResource, c.ns, customBuilderList), &v1alpha1.CustomBuilderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CustomBuilderList), err
}

// Update takes the representation of a customBuilderList and updates it. Returns the server's representation of the customBuilderList, and an error, if there is any.
func (c *FakeCustomBuilderLists) Update(customBuilderList *v1alpha1.CustomBuilderList) (result *v1alpha1.CustomBuilderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(custombuilderlistsResource, c.ns, customBuilderList), &v1alpha1.CustomBuilderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CustomBuilderList), err
}

// Delete takes name of the customBuilderList and deletes it. Returns an error if one occurs.
func (c *FakeCustomBuilderLists) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(custombuilderlistsResource, c.ns, name), &v1alpha1.CustomBuilderList{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCustomBuilderLists) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(custombuilderlistsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.CustomBuilderListList{})
	return err
}

// Patch applies the patch and returns the patched customBuilderList.
func (c *FakeCustomBuilderLists) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CustomBuilderList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(custombuilderlistsResource, c.ns, name, pt, data, subresources...), &v1alpha1.CustomBuilderList{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.CustomBuilderList), err
}
